from typing import Dict, Any
from .base import BaseEvaluator

class ExactMatchEvaluator(BaseEvaluator):
    """
    Evaluates if the generated output exactly matches the reference answer.
    The comparison is case-insensitive and ignores leading/trailing whitespace.
    """

    def evaluate(self, generated_output: str, reference_answer: str) -> Dict[str, Any]:
        """
        Performs a case-insensitive exact match comparison.

        Args:
            generated_output (str): The output generated by the LLM.
            reference_answer (str): The ground truth or expected answer.

        Returns:
            A dictionary with a 'score' (1.0 for a match, 0.0 otherwise)
            and a 'reasoning' message.
        """
        processed_generated = generated_output.strip().lower()
        processed_reference = reference_answer.strip().lower()

        if processed_generated == processed_reference:
            return {
                'score': 1.0,
                'reasoning': 'Exact match found (case-insensitive).'
            }
        else:
            return {
                'score': 0.0,
                'reasoning': 'Outputs do not match.'
            }