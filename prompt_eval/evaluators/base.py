from abc import ABC, abstractmethod
from typing import Dict, Any

class BaseEvaluator(ABC):
    """
    An abstract base class for all evaluators.

    It enforces that every concrete evaluator must implement the `evaluate` method,
    ensuring a consistent interface across the framework.
    """
        
    @abstractmethod
    def evaluate(self, generated_output: str, reference_answer: str) -> Dict[str, Any]:
        """
        Evaluates the generated output against a reference answer.

        Args:
            generated_output (str): The output generated by the Large Language Model.
            reference_answer (str): The ground truth or expected answer.

        Returns:
            Dict[str, Any]: A dictionary containing evaluation metrics. 
                            For example, {'score': 1.0, 'reasoning': 'Perfect match.'}
        """
        pass